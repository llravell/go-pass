// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=../../mocks/mock_usecase_server.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/llravell/go-pass/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// FindUserByLogin mocks base method.
func (m *MockUserRepository) FindUserByLogin(ctx context.Context, login string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByLogin", ctx, login)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByLogin indicates an expected call of FindUserByLogin.
func (mr *MockUserRepositoryMockRecorder) FindUserByLogin(ctx, login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByLogin", reflect.TypeOf((*MockUserRepository)(nil).FindUserByLogin), ctx, login)
}

// StoreUser mocks base method.
func (m *MockUserRepository) StoreUser(ctx context.Context, login, password string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreUser", ctx, login, password)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreUser indicates an expected call of StoreUser.
func (mr *MockUserRepositoryMockRecorder) StoreUser(ctx, login, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreUser", reflect.TypeOf((*MockUserRepository)(nil).StoreUser), ctx, login, password)
}

// MockPasswordsRepository is a mock of PasswordsRepository interface.
type MockPasswordsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordsRepositoryMockRecorder
	isgomock struct{}
}

// MockPasswordsRepositoryMockRecorder is the mock recorder for MockPasswordsRepository.
type MockPasswordsRepositoryMockRecorder struct {
	mock *MockPasswordsRepository
}

// NewMockPasswordsRepository creates a new mock instance.
func NewMockPasswordsRepository(ctrl *gomock.Controller) *MockPasswordsRepository {
	mock := &MockPasswordsRepository{ctrl: ctrl}
	mock.recorder = &MockPasswordsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordsRepository) EXPECT() *MockPasswordsRepositoryMockRecorder {
	return m.recorder
}

// AddNewPassword mocks base method.
func (m *MockPasswordsRepository) AddNewPassword(ctx context.Context, userID int, password *entity.Password) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewPassword", ctx, userID, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewPassword indicates an expected call of AddNewPassword.
func (mr *MockPasswordsRepositoryMockRecorder) AddNewPassword(ctx, userID, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewPassword", reflect.TypeOf((*MockPasswordsRepository)(nil).AddNewPassword), ctx, userID, password)
}

// DeletePasswordByName mocks base method.
func (m *MockPasswordsRepository) DeletePasswordByName(ctx context.Context, userID int, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePasswordByName", ctx, userID, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePasswordByName indicates an expected call of DeletePasswordByName.
func (mr *MockPasswordsRepositoryMockRecorder) DeletePasswordByName(ctx, userID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePasswordByName", reflect.TypeOf((*MockPasswordsRepository)(nil).DeletePasswordByName), ctx, userID, name)
}

// GetPasswords mocks base method.
func (m *MockPasswordsRepository) GetPasswords(ctx context.Context, userID int) ([]*entity.Password, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswords", ctx, userID)
	ret0, _ := ret[0].([]*entity.Password)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswords indicates an expected call of GetPasswords.
func (mr *MockPasswordsRepositoryMockRecorder) GetPasswords(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswords", reflect.TypeOf((*MockPasswordsRepository)(nil).GetPasswords), ctx, userID)
}

// UpdateByName mocks base method.
func (m *MockPasswordsRepository) UpdateByName(ctx context.Context, userID int, name string, updateFn func(*entity.Password) (*entity.Password, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByName", ctx, userID, name, updateFn)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByName indicates an expected call of UpdateByName.
func (mr *MockPasswordsRepositoryMockRecorder) UpdateByName(ctx, userID, name, updateFn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByName", reflect.TypeOf((*MockPasswordsRepository)(nil).UpdateByName), ctx, userID, name, updateFn)
}

// MockCardsRepository is a mock of CardsRepository interface.
type MockCardsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCardsRepositoryMockRecorder
	isgomock struct{}
}

// MockCardsRepositoryMockRecorder is the mock recorder for MockCardsRepository.
type MockCardsRepositoryMockRecorder struct {
	mock *MockCardsRepository
}

// NewMockCardsRepository creates a new mock instance.
func NewMockCardsRepository(ctrl *gomock.Controller) *MockCardsRepository {
	mock := &MockCardsRepository{ctrl: ctrl}
	mock.recorder = &MockCardsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardsRepository) EXPECT() *MockCardsRepositoryMockRecorder {
	return m.recorder
}

// AddNewCard mocks base method.
func (m *MockCardsRepository) AddNewCard(ctx context.Context, userID int, card *entity.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewCard", ctx, userID, card)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewCard indicates an expected call of AddNewCard.
func (mr *MockCardsRepositoryMockRecorder) AddNewCard(ctx, userID, card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewCard", reflect.TypeOf((*MockCardsRepository)(nil).AddNewCard), ctx, userID, card)
}

// DeleteCardByName mocks base method.
func (m *MockCardsRepository) DeleteCardByName(ctx context.Context, userID int, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCardByName", ctx, userID, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCardByName indicates an expected call of DeleteCardByName.
func (mr *MockCardsRepositoryMockRecorder) DeleteCardByName(ctx, userID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCardByName", reflect.TypeOf((*MockCardsRepository)(nil).DeleteCardByName), ctx, userID, name)
}

// GetCards mocks base method.
func (m *MockCardsRepository) GetCards(ctx context.Context, userID int) ([]*entity.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCards", ctx, userID)
	ret0, _ := ret[0].([]*entity.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCards indicates an expected call of GetCards.
func (mr *MockCardsRepositoryMockRecorder) GetCards(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCards", reflect.TypeOf((*MockCardsRepository)(nil).GetCards), ctx, userID)
}

// UpdateByName mocks base method.
func (m *MockCardsRepository) UpdateByName(ctx context.Context, userID int, name string, updateFn func(*entity.Card) (*entity.Card, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByName", ctx, userID, name, updateFn)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByName indicates an expected call of UpdateByName.
func (mr *MockCardsRepositoryMockRecorder) UpdateByName(ctx, userID, name, updateFn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByName", reflect.TypeOf((*MockCardsRepository)(nil).UpdateByName), ctx, userID, name, updateFn)
}

// MockJWTIssuer is a mock of JWTIssuer interface.
type MockJWTIssuer struct {
	ctrl     *gomock.Controller
	recorder *MockJWTIssuerMockRecorder
	isgomock struct{}
}

// MockJWTIssuerMockRecorder is the mock recorder for MockJWTIssuer.
type MockJWTIssuerMockRecorder struct {
	mock *MockJWTIssuer
}

// NewMockJWTIssuer creates a new mock instance.
func NewMockJWTIssuer(ctrl *gomock.Controller) *MockJWTIssuer {
	mock := &MockJWTIssuer{ctrl: ctrl}
	mock.recorder = &MockJWTIssuerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTIssuer) EXPECT() *MockJWTIssuerMockRecorder {
	return m.recorder
}

// Issue mocks base method.
func (m *MockJWTIssuer) Issue(userID int, ttl time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issue", userID, ttl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Issue indicates an expected call of Issue.
func (mr *MockJWTIssuerMockRecorder) Issue(userID, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issue", reflect.TypeOf((*MockJWTIssuer)(nil).Issue), userID, ttl)
}
